ktor {
    environment = dev
    environment = ${?ENVIRONMENT}

    deployment {
        port = 8080
        port = ${?PORT}
        host = "localhost"
        host = ${?HOST}
    }
    application {
        modules = [ application.ApplicationKt.module ]
    }
    https {
        redirect = false
        redirect = ${?HTTPS_REDIRECT}
    }
}
features {
    generateExampleProject = true
    generateExampleProject = ${?GENERATE_EXAMPLE_PROJECT}
}
mongo {
    user = "user"
    user = ${?MONGO_USER}
    password = "password"
    password = ${?MONGO_PASSWORD}
    connection = "localhost:27017"
    connection = ${?MONGO_CONNECTION}
    databaseName = "activeanno"
    databaseName = ${?MONGO_DATABASE_NAME}
}
cors {
    // Please define multiple subdomains as multiple entires in the hosts list
    // Please use comma separated string, because ENV arrays are not possible
    hosts = "localhost,localhost:3000,0.0.0.0,0.0.0.0:3000"
    hosts = ${?CORS_HOSTS_LIST}
}
jwt {
    // If useRoleProtection is false, all users that have a valid token can to everything in the service
    useRoleProtection = true
    useRoleProtection = ${?JWT_USE_ROLE_PROTECTION}
    // Here you have the ability to overwrite the JWT roles for authentication
    // If you don't have the ability to add an array with the default roles to your JWT you could overwrite these
    // to map the access rights to existing values in your JWT
    rolesKey = "roles"
    rolesKey = ${?JWT_ROLES_KEY}
    role {
        admin = "activeanno_admin"
        admin = ${?JWT_ROLE_ADMIN}
        manager = "activeanno_manager"
        manager = ${?JWT_ROLE_MANAGER}
        user = "activeanno_user"
        user = ${?JWT_ROLE_USER}
        producer = "activeanno_producer"
        producer = ${?JWT_ROLE_PRODUCER}
        consumer = "activeanno_consumer"
        consumer = ${?JWT_ROLE_CONSUMER}
        globalSearch = "activeanno_global_search"
        globalSearch = ${?JWT_ROLE_GLOBAL_SEARCH}
    }
    // What key should be used to identify a unique user (the identifier needs to be used in configurations etc.)
    userIdentifierKey = "sub"
    userIdentifierKey = ${?JWT_USER_IDENTIFIER_KEY}
    userNameKey = "name"
    userNameKey = ${?JWT_USER_NAME}
    // Server-side validation of tokens
    validation {
        // Accept all tokens as valid, DON'T do this in production
        acceptAllTokens = true
        acceptAllTokens = ${?JWT_VALIDATION_ACCEPT_ALL_TOKENS}
        // Url of authorization server, only necessary if acceptAllTokens is false
        url = ""
        url = ${?JWT_VALIDATION_URL}
    }
}